// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Day.js
dayjs.extend(dayjs_plugin_duration);

// –ì–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–≥—Ä—ã
const game = {
    // –†–µ—Å—É—Ä—Å—ã –∏–≥—Ä–æ–∫–∞
    money: 0,
    resources: {
        coal: 0,
        copper: 0,
        iron: 0,
        gold: 0
    },
    
    // –ò–≥—Ä–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
    workers: [],
    mineLevel: 1,
    unlockedMines: ['coal'],
    startTime: null,
    
    // –¶–µ–Ω—ã –∏ –±–∞–ª–∞–Ω—Å
    prices: {
        worker: 50,
        upgrade: 100,
        copperMine: 500,
        ironMine: 2000,
        goldMine: 10000
    },
    
    // –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Ä–µ—Å—É—Ä—Å–æ–≤
    resourceValue: {
        coal: 1,
        copper: 5,
        iron: 20,
        gold: 100
    },
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init() {
        console.log('üéÆ –ó–∞–ø—É—Å–∫ Idle Miner...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–∞—É–∑–µ—Ä
        this.checkBrowserSupport();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        this.loadGame();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        this.startTime = dayjs();
        this.updatePlayTime();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
        this.startGameLoop();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Phaser
        this.initPhaser();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.updateUI();
        
        console.log('‚úÖ –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞!');
    },
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
    checkBrowserSupport() {
        console.log('üîç –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–∞:');
        console.log('- LocalStorage:', Modernizr.localstorage);
        console.log('- ES6:', Modernizr.es6);
        console.log('- Canvas:', Modernizr.canvas);
    },
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    async loadGame() {
        try {
            const saved = await localforage.getItem('idleMiner_save');
            if (saved) {
                this.money = saved.money || 0;
                this.resources = saved.resources || this.resources;
                this.workers = saved.workers || [];
                this.mineLevel = saved.mineLevel || 1;
                this.unlockedMines = saved.unlockedMines || ['coal'];
                console.log('üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∂–µ–Ω');
            }
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        }
    },
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
    async saveGame() {
        try {
            await localforage.setItem('idleMiner_save', {
                money: this.money,
                resources: this.resources,
                workers: this.workers,
                mineLevel: this.mineLevel,
                unlockedMines: this.unlockedMines,
                saveTime: dayjs().format()
            });
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        }
    },
    
    // –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)
    startGameLoop() {
        setInterval(() => {
            this.autoMine(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–æ–±—ã—á–∞
            this.updateUI(); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            this.saveGame(); // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        }, 1000);
    },
    
    // –†—É—á–Ω–∞—è –¥–æ–±—ã—á–∞ (–ø–æ –∫–ª–∏–∫—É)
    mine() {
        let minedResources = {};
        
        // –î–æ–±—ã–≤–∞–µ–º –∏–∑ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö —à–∞—Ö—Ç
        this.unlockedMines.forEach(mineType => {
            const amount = this.getMineYield(mineType);
            this.resources[mineType] += amount;
            minedResources[mineType] = amount;
        });
        
        // –ü—Ä–æ–¥–∞–µ–º –¥–æ–±—ã—Ç—É—é —Ä—É–¥—É
        this.sellResources();
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –¥–æ–±—ã—á–∏
        this.mineAnimation(minedResources);
        
        console.log('‚õèÔ∏è –î–æ–±—ã—Ç–æ:', minedResources);
    },
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–æ–±—ã—á–∞ (—Ä–∞–±–æ—á–∏–º–∏)
    autoMine() {
        if (this.workers.length === 0) return;
        
        let totalMined = {};
        
        this.workers.forEach(worker => {
            this.unlockedMines.forEach(mineType => {
                const amount = worker.power * this.getMineYield(mineType);
                this.resources[mineType] += amount;
                totalMined[mineType] = (totalMined[mineType] || 0) + amount;
            });
        });
        
        // –ü—Ä–æ–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±—ã—Ç—É—é —Ä—É–¥—É
        this.sellResources();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—á–∏—Ö
        this.updateWorkersPanel();
    },
    
    // –†–∞—Å—á–µ—Ç –¥–æ–±—ã—á–∏ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è —à–∞—Ö—Ç—ã
    getMineYield(mineType) {
        const baseYield = {
            coal: 1,
            copper: 0.5,
            iron: 0.2,
            gold: 0.05
        };
        
        return baseYield[mineType] * this.mineLevel;
    },
    
    // –ü—Ä–æ–¥–∞–∂–∞ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    sellResources() {
        let totalIncome = 0;
        
        Object.keys(this.resources).forEach(resource => {
            const sold = Math.floor(this.resources[resource]);
            const income = sold * this.resourceValue[resource];
            
            this.money += income;
            this.resources[resource] -= sold;
            totalIncome += income;
        });
        
        return totalIncome;
    },
    
    // –ù–∞–Ω—è—Ç—å —Ä–∞–±–æ—á–µ–≥–æ
    hireWorker() {
        if (this.money >= this.prices.worker) {
            this.money -= this.prices.worker;
            
            const worker = {
                id: Date.now(),
                power: 1, // –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                hireTime: dayjs()
            };
            
            this.workers.push(worker);
            this.prices.worker = Math.floor(this.prices.worker * 1.5); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ü–µ–Ω—É
            
            console.log('üë∑ –ù–∞–Ω—è—Ç –Ω–æ–≤—ã–π —Ä–∞–±–æ—á–∏–π!');
            this.updateUI();
        } else {
            alert('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –Ω–∞–π–º–∞ —Ä–∞–±–æ—á–µ–≥–æ!');
        }
    },
    
    // –£–ª—É—á—à–∏—Ç—å —à–∞—Ö—Ç—É
    upgradeMine() {
        if (this.money >= this.prices.upgrade) {
            this.money -= this.prices.upgrade;
            this.mineLevel++;
            this.prices.upgrade = Math.floor(this.prices.upgrade * 2);
            
            console.log('‚¨ÜÔ∏è –®–∞—Ö—Ç–∞ —É–ª—É—á—à–µ–Ω–∞ –¥–æ —É—Ä–æ–≤–Ω—è', this.mineLevel);
            this.updateUI();
        } else {
            alert('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è!');
        }
    },
    
    // –û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é —à–∞—Ö—Ç—É
    unlockMine(mineType) {
        const cost = this.prices[mineType + 'Mine'];
        
        if (this.money >= cost && !this.unlockedMines.includes(mineType)) {
            this.money -= cost;
            this.unlockedMines.push(mineType);
            
            console.log('üÜï –û—Ç–∫—Ä—ã—Ç–∞ —à–∞—Ö—Ç–∞:', mineType);
            this.updateUI();
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–π —à–∞—Ö—Ç—ã
            this.unlockAnimation(mineType);
        } else {
            alert('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –∏–ª–∏ —à–∞—Ö—Ç–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞!');
        }
    },
    
    // –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–∞ –≤ —Å–µ–∫—É–Ω–¥—É
    getIncomePerSecond() {
        let income = 0;
        
        this.workers.forEach(worker => {
            this.unlockedMines.forEach(mineType => {
                income += worker.power * this.getMineYield(mineType) * this.resourceValue[mineType];
            });
        });
        
        return income.toFixed(1);
    },
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    updateUI() {
        // –†–µ—Å—É—Ä—Å—ã
        document.getElementById('money').textContent = Math.floor(this.money);
        document.getElementById('coal').textContent = this.resources.coal.toFixed(1);
        document.getElementById('copper').textContent = this.resources.copper.toFixed(1);
        document.getElementById('iron').textContent = this.resources.iron.toFixed(1);
        document.getElementById('gold').textContent = this.resources.gold.toFixed(1);
        document.getElementById('workers').textContent = this.workers.length;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        document.getElementById('income-per-second').textContent = this.getIncomePerSecond();
        document.getElementById('mine-level').textContent = this.mineLevel;
        
        // –¶–µ–Ω—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ
        document.getElementById('worker-cost').textContent = this.prices.worker;
        document.getElementById('upgrade-cost').textContent = this.prices.upgrade;
        document.getElementById('copper-mine-cost').textContent = this.prices.copperMine;
        document.getElementById('iron-mine-cost').textContent = this.prices.ironMine;
        document.getElementById('gold-mine-cost').textContent = this.prices.goldMine;
        document.getElementById('current-level').textContent = this.mineLevel;
        document.getElementById('worker-power').textContent = this.workers.length;
        
        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥
        this.updateShopButtons();
    },
    
    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–∞–≥–∞–∑–∏–Ω–∞
    updateShopButtons() {
        const shopItems = document.querySelectorAll('.shop-item');
        shopItems.forEach(item => {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ-–∫–Ω–æ–ø–∫–∏
            if (!item.onclick) return;
            
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            // –ù–∞–ø—Ä–∏–º–µ—Ä: if (this.money < requiredPrice) item.classList.add('disabled');
        });
    },
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Ä–∞–±–æ—á–∏—Ö
    updateWorkersPanel() {
        const workersStats = document.getElementById('workers-stats');
        
        if (this.workers.length === 0) {
            workersStats.innerHTML = '–ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö - –Ω–∞–π–º–∏—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –¥–æ–±—ã—á–∏!';
        } else {
            workersStats.innerHTML = `
                <strong>${this.workers.length} —Ä–∞–±–æ—á–∏—Ö</strong><br>
                <small>–î–æ–±—ã–≤–∞—é—Ç: ${this.getIncomePerSecond()}$/—Å–µ–∫</small>
            `;
        }
    },
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã
    updatePlayTime() {
        setInterval(() => {
            if (this.startTime) {
                const duration = dayjs.duration(dayjs().diff(this.startTime));
                const hours = Math.floor(duration.asHours());
                const minutes = duration.minutes();
                const seconds = duration.seconds();
                
                const timeString = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                document.getElementById('play-time').textContent = timeString;
            }
        }, 1000);
    },
    
    // Phaser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initPhaser() {
        const isMobile = this.isMobileDevice();
        const isOldAndroid = /Android [4-7]/.test(navigator.userAgent);
        
        const config = {
            type: Phaser.AUTO,
            width: 800,
            height: 200,
            parent: 'game-container',
            backgroundColor: '#1a5276',
            
            // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–ª–∞–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            render: {
                pixelArt: isOldAndroid,
                antialias: !isOldAndroid
            },
            fps: {
                target: isOldAndroid ? 30 : 60,
                forceSetTimeOut: true
            },
            
            scene: {
                preload: this.preload.bind(this),
                create: this.create.bind(this),
                update: this.update.bind(this)
            }
        };
        
        this.phaserGame = new Phaser.Game(config);
    },
    
    // Phaser: –∑–∞–≥—Ä—É–∑–∫–∞
    preload() {
        console.log('üé® Phaser: –ó–∞–≥—Ä—É–∂–∞–µ–º assets...');
    },
    
    // Phaser: —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
    create() {
        console.log('üé® Phaser: –°–æ–∑–¥–∞–µ–º —à–∞—Ö—Ç—É...');
        this.graphics = this.phaserGame.scene.scenes[0].add.graphics();
        this.drawMineShaft();
    },
    
    // Phaser: –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    update() {
        // –ê–Ω–∏–º–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
    },
    
    // –†–∏—Å—É–µ–º —à–∞—Ö—Ç—É
    drawMineShaft() {
        this.graphics.clear();
        
        // –ó–µ–º–ª—è
        this.graphics.fillStyle(0x8b4513);
        this.graphics.fillRect(0, 100, 800, 100);
        
        // –®–∞—Ö—Ç–Ω—ã–µ —Å—Ç–≤–æ–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ç–∫—Ä—ã—Ç–æ–π —à–∞—Ö—Ç—ã
        const mines = this.unlockedMines;
        const shaftWidth = 800 / (mines.length + 1);
        
        mines.forEach((mineType, index) => {
            const x = (index + 1) * shaftWidth - 20;
            const color = this.getMineColor(mineType);
            
            // –®–∞—Ö—Ç–Ω—ã–π —Å—Ç–≤–æ–ª
            this.graphics.fillStyle(color);
            this.graphics.fillRect(x, 50, 40, 50);
            
            // –ù–∞–¥–ø–∏—Å—å
            const text = this.phaserGame.scene.scenes[0].add.text(x + 5, 30, 
                this.getMineSymbol(mineType), 
                { fontSize: '20px', fill: '#fff' }
            );
        });
    },
    
    // –¶–≤–µ—Ç–∞ –¥–ª—è —à–∞—Ö—Ç
    getMineColor(mineType) {
        const colors = {
            coal: 0x2c3e50,
            copper: 0xd35400,
            iron: 0x7f8c8d,
            gold: 0xf39c12
        };
        return colors[mineType] || 0x000000;
    },
    
    // –°–∏–º–≤–æ–ª—ã –¥–ª—è —à–∞—Ö—Ç
    getMineSymbol(mineType) {
        const symbols = {
            coal: '‚õèÔ∏è',
            copper: 'üî∂', 
            iron: '‚öôÔ∏è',
            gold: '‚≠ê'
        };
        return symbols[mineType] || '?';
    },
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –¥–æ–±—ã—á–∏
    mineAnimation(minedResources) {
        if (!this.graphics) return;
        
        // –ú–∏–≥–∞–Ω–∏–µ —à–∞—Ö—Ç—ã
        this.graphics.clear();
        this.graphics.fillStyle(0xffffff);
        this.drawMineShaft();
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–∏–¥ —á–µ—Ä–µ–∑ 100ms
        setTimeout(() => {
            this.graphics.clear();
            this.drawMineShaft();
        }, 100);
    },
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è —à–∞—Ö—Ç—ã
    unlockAnimation(mineType) {
        if (!this.graphics) return;
        
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å –Ω–æ–≤–æ–π —à–∞—Ö—Ç–æ–π
        this.drawMineShaft();
        
        // –≠—Ñ—Ñ–µ–∫—Ç "–≤—Å–ø—ã—à–∫–∏" –¥–ª—è –Ω–æ–≤–æ–π —à–∞—Ö—Ç—ã
        const scene = this.phaserGame.scene.scenes[0];
        const mines = this.unlockedMines;
        const shaftWidth = 800 / (mines.length + 1);
        const index = mines.indexOf(mineType);
        const x = (index + 1) * shaftWidth - 20;
        
        const flash = scene.add.graphics();
        flash.fillStyle(0xffffff, 0.8);
        flash.fillRect(x - 10, 40, 60, 60);
        
        // –£–±–∏—Ä–∞–µ–º –≤—Å–ø—ã—à–∫—É —á–µ—Ä–µ–∑ 500ms
        setTimeout(() => {
            flash.destroy();
        }, 500);
    },
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    isMobileDevice() {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    }
};

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
window.addEventListener('load', () => {
    game.init();
});

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
window.addEventListener('beforeunload', () => {
    game.saveGame();
});
