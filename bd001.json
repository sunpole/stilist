{
    "id": "tictactoe",
    "title": "Крестики-Нолики (Pro)",
    "description": "Классическая игра против ИИ. Вы играете за крестики (X), компьютер за нолики (O).",
    "controls": {
        "dpad": "Перемещение по полю",
        "a": "Сделать ход в выбранной клетке",
        "start": "Вернуться в меню",
        "select": "Перезапустить игру"
    },
    "rules": [
        "Цель - выстроить 3 своих символа в ряд (по горизонтали, вертикали или диагонали)",
        "Вы ходите первыми (крестиками)",
        "ИИ отвечает автоматически (ноликами)",
        "При ничьей игра завершается"
    ],
    "init": "const state = {\n    board: Array(9).fill(null),\n    currentPlayer: 'x',\n    gameOver: false,\n    selectedIndex: 0\n};\n\nfunction renderBoard() {\n    const boardHTML = `\n        <div class=\"ttt-board\">\n            ${state.board.map((cell, index) => `\n                <div class=\"ttt-cell ${cell || ''} ${index === state.selectedIndex ? 'selected' : ''}\" \n                     data-index=\"${index}\">\n                    ${cell || ''}\n                </div>\n            `).join('')}\n        </div>\n        <div class=\"game-status\">\n            ${state.gameOver ? \n                `Игра окончена! ${checkWinner() ? `Победитель: ${checkWinner().toUpperCase()}` : 'Ничья'}` : \n                `Ход: ${state.currentPlayer.toUpperCase()}`}\n        </div>\n    `;\n    \n    document.getElementById('game-container').innerHTML = boardHTML;\n}\n\nfunction makeMove(index) {\n    if (state.gameOver || state.board[index]) return;\n    \n    state.board[index] = state.currentPlayer;\n    \n    const winner = checkWinner();\n    if (winner) {\n        state.gameOver = true;\n    } else if (!state.board.includes(null)) {\n        state.gameOver = true;\n    } else {\n        state.currentPlayer = state.currentPlayer === 'x' ? 'o' : 'x';\n        if (state.currentPlayer === 'o') {\n            setTimeout(computerMove, 500);\n        }\n    }\n    \n    renderBoard();\n}\n\nfunction computerMove() {\n    if (state.gameOver) return;\n    \n    let move = findWinningMove('o') || findWinningMove('x') || findRandomMove();\n    if (move !== null) {\n        makeMove(move);\n    }\n}\n\nfunction findWinningMove(player) {\n    const lines = [\n        [0, 1, 2], [3, 4, 5], [6, 7, 8],\n        [0, 3, 6], [1, 4, 7], [2, 5, 8],\n        [0, 4, 8], [2, 4, 6]\n    ];\n    \n    for (let line of lines) {\n        const [a, b, c] = line;\n        if (state.board[a] === player && state.board[b] === player && state.board[c] === null) return c;\n        if (state.board[a] === player && state.board[c] === player && state.board[b] === null) return b;\n        if (state.board[b] === player && state.board[c] === player && state.board[a] === null) return a;\n    }\n    \n    return null;\n}\n\nfunction findRandomMove() {\n    const emptyCells = state.board.map((cell, index) => cell === null ? index : null).filter(val => val !== null);\n    return emptyCells.length > 0 ? emptyCells[Math.floor(Math.random() * emptyCells.length)] : null;\n}\n\nfunction checkWinner() {\n    const lines = [\n        [0, 1, 2], [3, 4, 5], [6, 7, 8],\n        [0, 3, 6], [1, 4, 7], [2, 5, 8],\n        [0, 4, 8], [2, 4, 6]\n    ];\n    \n    for (let line of lines) {\n        const [a, b, c] = line;\n        if (state.board[a] && state.board[a] === state.board[b] && state.board[a] === state.board[c]) {\n            return state.board[a];\n        }\n    }\n    \n    return null;\n}\n\nrenderBoard();",
    "handleInput": "switch(button) {\n    case 'up':\n        state.selectedIndex = (state.selectedIndex - 3 + 9) % 9;\n        break;\n    case 'down':\n        state.selectedIndex = (state.selectedIndex + 3) % 9;\n        break;\n    case 'left':\n        state.selectedIndex = (state.selectedIndex % 3 === 0) ? state.selectedIndex + 2 : state.selectedIndex - 1;\n        break;\n    case 'right':\n        state.selectedIndex = (state.selectedIndex % 3 === 2) ? state.selectedIndex - 2 : state.selectedIndex + 1;\n        break;\n    case 'a':\n        if (!state.gameOver && state.currentPlayer === 'x') {\n            makeMove(state.selectedIndex);\n        }\n        break;\n    case 'start':\n        backToMainMenu();\n        return;\n    case 'select':\n        state.board = Array(9).fill(null);\n        state.currentPlayer = 'x';\n        state.gameOver = false;\n        state.selectedIndex = 0;\n        break;\n}\n\nrenderBoard();"
}
