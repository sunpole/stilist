// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Day.js —Å –ø–ª–∞–≥–∏–Ω–∞–º–∏
dayjs.extend(window.dayjs_plugin_duration);
dayjs.extend(window.dayjs_plugin_relativeTime);

// –ì–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–≥—Ä—ã
const game = {
    // –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
    gold: 0,
    level: 1,
    health: 100,
    maxHealth: 100,
    damage: 10,
    startTime: null,
    playTime: '00:00',
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init() {
        console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        this.checkBrowserSupport();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        this.loadGame();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        this.startTime = dayjs();
        this.updatePlayTime();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º Phaser —Å—Ü–µ–Ω—É
        this.initPhaser();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.updateUI();
        
        console.log('‚úÖ –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞!');
    },
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
    checkBrowserSupport() {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞:');
        console.log('- LocalStorage:', Modernizr.localstorage);
        console.log('- Canvas:', Modernizr.canvas);
        console.log('- ES6:', Modernizr.es6);
        
        if (!Modernizr.localstorage) {
            alert('–í–Ω–∏–º–∞–Ω–∏–µ: –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!');
        }
    },
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–≥—Ä—ã
    async loadGame() {
        try {
            const saved = await localforage.getItem('clickerRPG_save');
            if (saved) {
                this.gold = saved.gold || 0;
                this.level = saved.level || 1;
                this.health = saved.health || 100;
                this.maxHealth = saved.maxHealth || 100;
                this.damage = saved.damage || 10;
                console.log('üíæ –ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            }
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        }
    },
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
    async saveGame() {
        try {
            await localforage.setItem('clickerRPG_save', {
                gold: this.gold,
                level: this.level,
                health: this.health,
                maxHealth: this.maxHealth,
                damage: this.damage,
                saveTime: dayjs().format()
            });
            console.log('üíæ –ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        }
    },
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Phaser
    initPhaser() {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        const isMobile = this.isMobileDevice();
        const isOldAndroid = /Android [4-7]/.test(navigator.userAgent);
        
        console.log('üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:', {
            isMobile,
            isOldAndroid,
            userAgent: navigator.userAgent
        });
        
        const config = {
            type: Phaser.AUTO,
            width: 800,
            height: 400,
            parent: 'game-container',
            backgroundColor: '#2d2d2d',
            
            // –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –°–õ–ê–ë–´–• –£–°–¢–†–û–ô–°–¢–í
            render: {
                pixelArt: isOldAndroid,      // –î–ª—è —Å—Ç–∞—Ä—ã—Ö Android
                antialias: !isOldAndroid     // –û—Ç–∫–ª—é—á–∞–µ–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
            },
            fps: {
                target: isOldAndroid ? 30 : 60, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º FPS
                forceSetTimeOut: true
            },
            
            scene: {
                preload: this.preload.bind(this),
                create: this.create.bind(this),
                update: this.update.bind(this)
            }
        };
        
        this.phaserGame = new Phaser.Game(config);
    },
    
    // Phaser: –∑–∞–≥—Ä—É–∑–∫–∞ assets
    preload() {
        // –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø—Ä–∞–π—Ç—ã, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Ä–∏—Å—É–µ–º –ø—Ä–∏–º–∏—Ç–∏–≤—ã
        console.log('üé® Phaser: preload');
    },
    
    // Phaser: —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
    create() {
        console.log('üé® Phaser: create');
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –≥—Ä–∞—Ñ–∏–∫—É
        this.graphics = this.phaserGame.scene.scenes[0].add.graphics();
        
        // –†–∏—Å—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        this.drawCharacter();
        
        // –†–∏—Å—É–µ–º –≤—Ä–∞–≥–∞
        this.drawEnemy();
    },
    
    // Phaser: –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    update() {
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
    },
    
    // –†–∏—Å—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    drawCharacter() {
        this.graphics.fillStyle(0x3498db); // –°–∏–Ω–∏–π
        this.graphics.fillRect(100, 200, 50, 100); // –¢–µ–ª–æ
        this.graphics.fillRect(80, 180, 90, 20);   // –†—É–∫–∏
    },
    
    // –†–∏—Å—É–µ–º –≤—Ä–∞–≥–∞
    drawEnemy() {
        this.graphics.fillStyle(0xe74c3c); // –ö—Ä–∞—Å–Ω—ã–π
        this.graphics.fillRect(600, 200, 50, 100); // –¢–µ–ª–æ
        this.graphics.fillRect(580, 180, 90, 20);  // –†—É–∫–∏
    },
    
    // –ê—Ç–∞–∫–∞!
    attack() {
        // –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–Ω
        const enemyDamage = Math.floor(Math.random() * 5) + 3;
        this.health -= enemyDamage;
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–æ–ª–æ—Ç–æ
        const goldEarned = Math.floor(Math.random() * 10) + 5;
        this.gold += goldEarned;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        if (this.gold > this.level * 50) {
            this.level++;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—Ä—Ç—å
        if (this.health <= 0) {
            this.health = 0;
            alert('üíÄ –í—ã –ø–æ–≥–∏–±–ª–∏! –ò–≥—Ä–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞.');
            this.resetGame();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        this.updateUI();
        this.saveGame();
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏ –≤ Phaser
        this.attackAnimation();
        
        console.log(`‚öîÔ∏è –ê—Ç–∞–∫–∞! –ü–æ–ª—É—á–µ–Ω–æ —É—Ä–æ–Ω–∞: ${enemyDamage}, –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${goldEarned} –∑–æ–ª–æ—Ç–∞`);
    },
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏
    attackAnimation() {
        if (this.graphics) {
            this.graphics.clear();
            this.drawCharacter();
            
            // –ú–∏–≥–∞–Ω–∏–µ –≤—Ä–∞–≥–∞ –ø—Ä–∏ –∞—Ç–∞–∫–µ
            this.graphics.fillStyle(0xff0000);
            this.graphics.fillRect(600, 200, 50, 100);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–≤–µ—Ç —á–µ—Ä–µ–∑ 200ms
            setTimeout(() => {
                this.graphics.clear();
                this.drawCharacter();
                this.drawEnemy();
            }, 200);
        }
    },
    
    // –ü–æ–∫—É–ø–∫–∞ –æ—Ä—É–∂–∏—è
    buyWeapon() {
        if (this.gold >= 50) {
            this.gold -= 50;
            this.damage += 5;
            this.updateUI();
            this.saveGame();
            alert('üõ°Ô∏è –ö—É–ø–ª–µ–Ω –Ω–æ–≤—ã–π –º–µ—á! –£—Ä–æ–Ω +5');
        } else {
            alert('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!');
        }
    },
    
    // –ü–æ–∫—É–ø–∫–∞ –±—Ä–æ–Ω–∏
    buyArmor() {
        if (this.gold >= 30) {
            this.gold -= 30;
            this.maxHealth += 20;
            this.health += 20;
            this.updateUI();
            this.saveGame();
            alert('üõ°Ô∏è –ö—É–ø–ª–µ–Ω–∞ –±—Ä–æ–Ω—è! –ó–¥–æ—Ä–æ–≤—å–µ +20');
        } else {
            alert('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!');
        }
    },
    
    // –õ–µ—á–µ–Ω–∏–µ
    heal() {
        const healCost = 10;
        if (this.gold >= healCost && this.health < this.maxHealth) {
            this.gold -= healCost;
            this.health = Math.min(this.health + 30, this.maxHealth);
            this.updateUI();
            this.saveGame();
            alert('‚ù§Ô∏è –í—ã –ø–æ–ª–µ—á–∏–ª–∏—Å—å!');
        } else {
            alert('‚ùå –ù–µ–ª—å–∑—è –ª–µ—á–∏—Ç—å—Å—è!');
        }
    },
    
    // –°–±—Ä–æ—Å –∏–≥—Ä—ã
    resetGame() {
        this.gold = 0;
        this.level = 1;
        this.health = 100;
        this.maxHealth = 100;
        this.damage = 10;
        this.startTime = dayjs();
        
        localforage.removeItem('clickerRPG_save');
        this.updateUI();
    },
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    updateUI() {
        document.getElementById('gold').textContent = this.gold;
        document.getElementById('level').textContent = this.level;
        document.getElementById('health').textContent = `${this.health}/${this.maxHealth}`;
    },
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã
    updatePlayTime() {
        setInterval(() => {
            if (this.startTime) {
                const duration = dayjs.duration(dayjs().diff(this.startTime));
                const hours = Math.floor(duration.asHours());
                const minutes = duration.minutes();
                const seconds = duration.seconds();
                
                this.playTime = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                document.getElementById('play-time').textContent = this.playTime;
            }
        }, 1000);
    },
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    isMobileDevice() {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
window.addEventListener('load', () => {
    game.init();
});

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏
window.addEventListener('beforeunload', () => {
    game.saveGame();
});
