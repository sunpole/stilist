<!-- modules/import-json.html -->
<style>
  .import-json {
    font-family: Arial, sans-serif;
    padding: 1rem;
    border-radius: 8px;
    background: #f9f9f9;
    max-width: 800px;
    margin: 0 auto;
  }
  
  .import-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
  }
  
  .import-methods {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 0.5rem;
  }
  
  .import-btn {
    background: #4a6fa5;
    color: white;
    border: none;
    padding: 6px 10px;
    border-radius: 4px;
    cursor: pointer;
    transition: background 0.3s;
    font-size: 13px;
    flex: 1;
    max-width: 15%;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  .file-explorer {
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 0.5rem;
    margin-bottom: 0.5rem;
    max-height: 200px;
    overflow-y: auto;
  }
  
  .file-item {
    padding: 0.3rem;
    cursor: pointer;
    border-radius: 3px;
    display: flex;
    justify-content: space-between;
  }
  
  .file-item:hover {
    background: #f0f0f0;
  }
  
  .file-size {
    color: #666;
    font-size: 0.8em;
  }
</style>

<div class="import-json">
  <div class="import-header">
    <h3 style="margin: 0">–ò–º–ø–æ—Ä—Ç JSON</h3>
    <div id="status-text" style="font-size: 13px; color: #666;">–ì–æ—Ç–æ–≤–æ</div>
  </div>
  
  <div class="file-info" id="file-info">
    –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
  </div>
  
  <div class="import-methods">
    <button class="import-btn" id="file-btn" title="–ò–º–ø–æ—Ä—Ç —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞">üìÅ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</button>
    <button class="import-btn" id="project-btn" title="–ü–æ–∏—Å–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ">üîç –ü—Ä–æ–µ–∫—Ç</button>
    <button class="import-btn" id="url-btn" title="–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ URL">üåê –°—Å—ã–ª–∫–∞</button>
  </div>
  
  <div class="file-explorer" id="file-explorer" style="display: none;">
    <div class="d-flex mb-2">
      <input type="text" id="search-input" placeholder="–ü–æ–∏—Å–∫ JSON —Ñ–∞–π–ª–æ–≤..." style="flex: 1; padding: 4px;">
      <button id="refresh-btn" style="margin-left: 5px; padding: 0 8px;">‚ü≥</button>
    </div>
    <div id="file-list"></div>
  </div>
</div>

<script>
  // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  const statusText = document.getElementById('status-text');
  const fileInfo = document.getElementById('file-info');
  const fileExplorer = document.getElementById('file-explorer');
  const fileList = document.getElementById('file-list');
  const searchInput = document.getElementById('search-input');
  const refreshBtn = document.getElementById('refresh-btn');

  // 1. –ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞
  document.getElementById('file-btn').addEventListener('click', () => {
    fileExplorer.style.display = 'none';
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.json';
    
    input.onchange = e => {
      const file = e.target.files[0];
      if (!file) return;
      
      updateStatus('–ó–∞–≥—Ä—É–∑–∫–∞...');
      
      const reader = new FileReader();
      reader.onload = e => {
        try {
          const jsonData = JSON.parse(e.target.result);
          updateFileInfo(`–§–∞–π–ª: ${file.name} (${formatFileSize(file.size)})`);
          saveToLocalStorage(jsonData);
          updateStatus('–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
        } catch (err) {
          updateStatus('–û—à–∏–±–∫–∞: –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON', 'error');
        }
      };
      
      reader.readAsText(file);
    };
    
    input.click();
  });

  // 2. –ü–æ–∏—Å–∫ JSON –≤ –ø—Ä–æ–µ–∫—Ç–µ
  document.getElementById('project-btn').addEventListener('click', () => {
    fileExplorer.style.display = 'block';
    searchFiles();
  });

  // 3. –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ URL
  document.getElementById('url-btn').addEventListener('click', async () => {
    fileExplorer.style.display = 'none';
    const url = prompt("–í–≤–µ–¥–∏—Ç–µ URL JSON-—Ñ–∞–π–ª–∞:", "data.json");
    if (!url) return;
    
    updateStatus('–ó–∞–≥—Ä—É–∑–∫–∞...');
    
    try {
      const response = await fetch(url);
      if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ HTTP: " + response.status);
      
      const jsonData = await response.json();
      updateFileInfo(`URL: ${url}`);
      saveToLocalStorage(jsonData);
      updateStatus('–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
    } catch (err) {
      updateStatus('–û—à–∏–±–∫–∞: ' + err.message, 'error');
    }
  });

  // –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ
  async function searchFiles() {
    updateStatus('–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤...');
    fileList.innerHTML = '<div class="file-item">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ
      const files = await getProjectFiles();
      displayFiles(files);
      updateStatus(`–ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤`);
    } catch (err) {
      updateStatus('–û—à–∏–±–∫–∞: ' + err.message, 'error');
      fileList.innerHTML = `<div class="file-item" style="color:red;">${err.message}</div>`;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
  async function getProjectFiles() {
    try {
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ API GitHub
      if (window.location.host.includes('github.io')) {
        const repo = window.location.pathname.split('/')[1];
        const response = await fetch(`https://api.github.com/repos/${repo}/${repo}.github.io/contents/`);
        if (!response.ok) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã");
        
        const data = await response.json();
        return data
          .filter(file => file.name.endsWith('.json'))
          .map(file => ({
            name: file.name,
            path: file.path,
            size: file.size
          }));
      }
      
      // Fallback: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—É—Ç–µ–π
      const knownFiles = ['data.json', 'config.json', 'db.json'];
      const availableFiles = [];
      
      for (const file of knownFiles) {
        try {
          const response = await fetch(file);
          if (response.ok) {
            availableFiles.push({
              name: file,
              path: file,
              size: (await response.blob()).size
            });
          }
        } catch (e) {}
      }
      
      if (availableFiles.length === 0) {
        throw new Error("JSON —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
      }
      
      return availableFiles;
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:", err);
      throw err;
    }
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
  function displayFiles(files) {
    fileList.innerHTML = '';
    
    if (files.length === 0) {
      fileList.innerHTML = '<div class="file-item">–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
      return;
    }
    
    const searchTerm = searchInput.value.toLowerCase();
    const filteredFiles = files.filter(file => 
      file.name.toLowerCase().includes(searchTerm)
    );
    
    if (filteredFiles.length === 0) {
      fileList.innerHTML = '<div class="file-item">–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π</div>';
      return;
    }
    
    filteredFiles.forEach(file => {
      const fileItem = document.createElement('div');
      fileItem.className = 'file-item';
      fileItem.innerHTML = `
        <span>${file.name}</span>
        <span class="file-size">${formatFileSize(file.size)}</span>
      `;
      
      fileItem.addEventListener('click', async () => {
        updateStatus(`–ó–∞–≥—Ä—É–∑–∫–∞ ${file.name}...`);
        try {
          const response = await fetch(file.path);
          const jsonData = await response.json();
          
          updateFileInfo(`–§–∞–π–ª: ${file.name} (${formatFileSize(file.size)})`);
          saveToLocalStorage(jsonData);
          updateStatus('–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
          fileExplorer.style.display = 'none';
        } catch (err) {
          updateStatus('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏', 'error');
        }
      });
      
      fileList.appendChild(fileItem);
    });
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
  function formatFileSize(bytes) {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(1) + ' ' + sizes[i];
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
  function saveToLocalStorage(data) {
    try {
      localStorage.setItem('currentJson', JSON.stringify(data));
      localStorage.setItem('lastLoaded', new Date().toLocaleString());
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
      window.dispatchEvent(new CustomEvent('json-loaded', { detail: data }));
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", e);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
  function updateStatus(message, type = 'info') {
    statusText.textContent = message;
    statusText.style.color = type === 'error' ? 'red' : '#666';
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
  function updateFileInfo(info) {
    fileInfo.textContent = info;
  }

  // –°–æ–±—ã—Ç–∏—è –ø–æ–∏—Å–∫–∞
  searchInput.addEventListener('input', () => {
    searchFiles();
  });
  
  refreshBtn.addEventListener('click', () => {
    searchFiles();
  });

  // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
  if (localStorage.getItem('currentJson')) {
    updateFileInfo(`–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª: ${localStorage.getItem('lastLoaded')}`);
  }
</script>
