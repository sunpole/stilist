// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Day.js
dayjs.locale('ru');
dayjs.extend(dayjs_plugin_isoWeek);
dayjs.extend(dayjs_plugin_isBetween);

class TypographyGame {
    constructor() {
        this.config = {
            startDate: '2025-09-01 09:00:00',
            workDay: { start: 9, end: 17 },
            gameHourToRealSeconds: 7.5,
            baseDrive: 80,
            employeeDriveBonus: 80,
            drivePerHour: 1,
            actionsPerOrder: 7,
            baseEmployeeSpeed: 500,
            workDays: [1, 2, 3, 4, 5],
            // –ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤
            baseOrdersPerDay: 8,
            reputationImpact: 0.1, // 10% —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –∫–∞–∂–¥—ã–µ 10 —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
            maxReputationBonus: 2.0, // –ú–∞–∫—Å–∏–º—É–º –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –∑–∞–∫–∞–∑–æ–≤
            // –°–∏—Å—Ç–µ–º–∞ —Ä–µ–¥–∫–∏—Ö –¥–Ω–µ–π
            rareDayChance: 0.025, // 2.5% —à–∞–Ω—Å –Ω–∞ —Ä–µ–¥–∫–∏–π –¥–µ–Ω—å (1/40)
            rareDayMultiplier: { min: 1.1, max: 1.5 }, // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —Ä–µ–¥–∫–∏—Ö –¥–Ω–µ–π
            normalDayMultiplier: { min: 0.2, max: 1.0 } // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –¥–Ω–µ–π
        };

        this.state = {
            currentTime: dayjs(this.config.startDate),
            drive: this.config.baseDrive,
            maxDrive: this.config.baseDrive,
            money: 1000,
            exp: 0,
            reputation: 0,
            level: 1,
            employees: [],
            freeEmployees: 0,
            orders: {
                available: [],
                active: [],
                completed: 0
            },
            departments: [
                { id: 1, name: '–î–∏–∑–∞–π–Ω', employees: 0, queue: [] },
                { id: 2, name: '–ü–µ—á–∞—Ç—å', employees: 0, queue: [] },
                { id: 3, name: '–†–µ–∑–∫–∞', employees: 0, queue: [] },
                { id: 4, name: '–§–∞–ª—å—Ü–æ–≤–∫–∞', employees: 0, queue: [] },
                { id: 5, name: '–ë—Ä–æ—à—é—Ä–æ–≤–∫–∞', employees: 0, queue: [] },
                { id: 6, name: '–õ–∞–º–∏–Ω–∞—Ü–∏—è', employees: 0, queue: [] },
                { id: 7, name: '–£–ø–∞–∫–æ–≤–∫–∞', employees: 0, queue: [] }
            ],
            employeeIdCounter: 1,
            orderIdCounter: 1,
            lastDriveUpdate: Date.now(),
            // –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤
            dailyOrders: {
                targetCount: 0,
                generatedCount: 0,
                isRareDay: false,
                lastRareDay: null
            }
        };

        this.init();
    }

    init() {
        this.generateDepartmentsHTML();
        this.setupEventListeners();
        this.startGameLoop();
        this.calculateDailyOrders(); // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –Ω–∞ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å
        this.generateInitialOrders();
        this.updateDisplay();
    }

    // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –¥–µ–Ω—å
    calculateDailyOrders() {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥—Ä–∞–π–≤–∞
        const totalEmployees = this.state.departments.reduce((sum, dept) => sum + dept.employees, 0);
        const passiveDrain = (1 + totalEmployees) * 8; // –ü–∞—Å—Å–∏–≤–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ –∑–∞ –¥–µ–Ω—å
        const availableDrive = this.state.maxDrive - passiveDrain;
        const maxPossibleOrders = Math.floor(availableDrive / this.config.actionsPerOrder);

        // –ë–æ–Ω—É—Å –æ—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –º–∞–∫—Å–∏–º—É–º–æ–º)
        const reputationBonus = Math.min(
            1 + (this.state.reputation * this.config.reputationImpact),
            this.config.maxReputationBonus
        );

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä–µ–¥–∫–∏–π –ª–∏ —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å
        const daysSinceLastRareDay = this.state.dailyOrders.lastRareDay ? 
            this.state.currentTime.diff(this.state.dailyOrders.lastRareDay, 'day') : 999;
        
        const canBeRareDay = daysSinceLastRareDay >= 40;
        const isRareDay = canBeRareDay && Math.random() < this.config.rareDayChance;

        // –í—ã–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–Ω—è
        let multiplier;
        if (isRareDay) {
            multiplier = this.config.rareDayMultiplier.min + 
                Math.random() * (this.config.rareDayMultiplier.max - this.config.rareDayMultiplier.min);
            this.state.dailyOrders.lastRareDay = this.state.currentTime;
            this.showNotification("üåü –†–ï–î–ö–ò–ô –î–ï–ù–¨! –°–µ–≥–æ–¥–Ω—è –æ–∂–∏–¥–∞–µ—Ç—Å—è –±–æ–ª—å—à–µ –∑–∞–∫–∞–∑–æ–≤!");
        } else {
            multiplier = this.config.normalDayMultiplier.min + 
                Math.random() * (this.config.normalDayMultiplier.max - this.config.normalDayMultiplier.min);
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
        const baseOrders = maxPossibleOrders * reputationBonus;
        const targetOrders = Math.max(1, Math.floor(baseOrders * multiplier));

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.state.dailyOrders = {
            targetCount: targetOrders,
            generatedCount: 0,
            isRareDay: isRareDay,
            lastRareDay: this.state.dailyOrders.lastRareDay
        };

        console.log(`–†–∞—Å—á–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –¥–µ–Ω—å:`, {
            maxPossibleOrders,
            reputation: this.state.reputation,
            reputationBonus,
            multiplier,
            targetOrders,
            isRareDay
        });
    }

    // –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞ —Å —É—á–µ—Ç–æ–º –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
    generateOrder() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
        if (this.state.dailyOrders.generatedCount >= this.state.dailyOrders.targetCount) {
            return false;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ (–≤ —Ä–µ–¥–∫–∏–µ –¥–Ω–∏ –±–æ–ª—å—à–µ —à–∞–Ω—Å –Ω–∞ —Ä–µ–¥–∫–∏–µ –∑–∞–∫–∞–∑—ã)
        const rand = Math.random();
        let rarity, rewardMultiplier, timeMultiplier, reputationReward, reputationPenalty, expReward;

        // –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤ –æ–±—ã—á–Ω—ã–µ –¥–Ω–∏
        let legendaryChance = 0.05;
        let rareChance = 0.20;

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–µ–¥–∫–∏–µ –¥–Ω–∏
        if (this.state.dailyOrders.isRareDay) {
            legendaryChance = 0.10;
            rareChance = 0.30;
        }

        if (rand < legendaryChance) {
            rarity = 'legendary';
            rewardMultiplier = 5;
            timeMultiplier = 3;
            reputationReward = 5;
            reputationPenalty = -3;
            expReward = 50;
        } else if (rand < legendaryChance + rareChance) {
            rarity = 'rare';
            rewardMultiplier = 2;
            timeMultiplier = 1.5;
            reputationReward = 2;
            reputationPenalty = -1;
            expReward = 20;
        } else {
            rarity = 'common';
            rewardMultiplier = 1;
            timeMultiplier = 1;
            reputationReward = 1;
            reputationPenalty = -1;
            expReward = 10;
        }

        const baseReward = 50 + (Math.floor(Math.random() * 50));
        const baseTime = 2 + (Math.floor(Math.random() * 4));
        
        const orderTypes = [
            { name: '–í–∏–∑–∏—Ç–∫–∏' }, { name: '–ë—Ä–æ—à—é—Ä—ã' }, { name: '–ö–∞—Ç–∞–ª–æ–≥–∏' },
            { name: '–ü–ª–∞–∫–∞—Ç—ã' }, { name: '–õ–∏—Å—Ç–æ–≤–∫–∏' }, { name: '–ë—É–∫–ª–µ—Ç—ã' },
            { name: '–û—Ç–∫—Ä—ã—Ç–∫–∏' }, { name: '–ë–ª–∞–Ω–∫–∏' }, { name: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è' }
        ];

        const orderType = orderTypes[Math.floor(Math.random() * orderTypes.length)];
        
        const order = {
            id: this.state.orderIdCounter++,
            name: `${orderType.name} #${Math.floor(Math.random() * 1000)}`,
            type: orderType.name,
            rarity: rarity,
            reward: Math.floor(baseReward * rewardMultiplier),
            deadline: this.state.currentTime.add(baseTime * timeMultiplier, 'hour'),
            reputationReward: reputationReward,
            reputationPenalty: reputationPenalty,
            expReward: expReward,
            currentDept: 0,
            progress: 0,
            accepted: false
        };

        this.state.orders.available.push(order);
        this.state.dailyOrders.generatedCount++;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–µ–¥–∫–∏–µ –¥–Ω–∏
        if (this.state.dailyOrders.isRareDay && this.state.dailyOrders.generatedCount % 3 === 0) {
            const remaining = this.state.dailyOrders.targetCount - this.state.dailyOrders.generatedCount;
            if (remaining > 0) {
                this.showNotification(`–†–µ–¥–∫–∏–π –¥–µ–Ω—å: –æ—Å—Ç–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ${remaining} –∑–∞–∫–∞–∑–æ–≤`);
            }
        }

        return true;
    }

    generateInitialOrders() {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –∑–∞–∫–∞–∑—ã –¥–Ω—è
        const initialOrders = Math.min(3, this.state.dailyOrders.targetCount);
        for (let i = 0; i < initialOrders; i++) {
            this.generateOrder();
        }
    }

    // –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
    nextWorkDay() {
        let nextDay = this.state.currentTime.add(1, 'day');
        
        while (!this.config.workDays.includes(nextDay.isoWeekday())) {
            nextDay = nextDay.add(1, 'day');
        }
        
        this.state.currentTime = nextDay.set('hour', this.config.workDay.start).set('minute', 0);
        this.restoreDrive();
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å
        this.calculateDailyOrders();
        this.generateInitialOrders();
        
        const dayInfo = this.state.dailyOrders.isRareDay ? " (üåü –†–ï–î–ö–ò–ô –î–ï–ù–¨)" : "";
        this.showNotification(`–ù–∞—á–∞–ª—Å—è –Ω–æ–≤—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å! ${this.state.currentTime.format('D MMMM YYYY')}${dayInfo}\n–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: ${this.state.dailyOrders.targetCount}`);
    }

    // –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°—Ç–∞—Ä—Ç –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
    startGameLoop() {
        // –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)
        this.gameInterval = setInterval(() => {
            this.updateGameTime();
            this.updateDrive();
            this.processEmployees();
            this.updateDayProgress();
            this.updateDisplay();
            this.checkDayEnd();
            this.removeExpiredOrders();
        }, 1000);

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ - —Ç–µ–ø–µ—Ä—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
        this.orderInterval = setInterval(() => {
            if (this.isWorkTime()) {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã —á–∞—â–µ, –µ—Å–ª–∏ —É –Ω–∞—Å –º–µ–Ω—å—à–µ 5 –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
                if (this.state.orders.available.length < 5 && 
                    this.state.dailyOrders.generatedCount < this.state.dailyOrders.targetCount) {
                    this.generateOrder();
                }
            }
        }, 8000); // –£–≤–µ–ª–∏—á–∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 8 —Å–µ–∫—É–Ω–¥

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
        this.employeeInterval = setInterval(() => {
            if (this.isWorkTime()) {
                this.processEmployeeWork();
            }
        }, this.config.baseEmployeeSpeed);
    }

    // –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–Ω–µ
    updateDisplay() {
        // –†–µ—Å—É—Ä—Å—ã
        document.getElementById('driveValue').textContent = 
            `${Math.floor(this.state.drive)}/${this.state.maxDrive}`;
        document.getElementById('moneyValue').textContent = 
            `${this.state.money.toLocaleString()} ‚ÇΩ`;
        document.getElementById('expValue').textContent = this.state.exp;
        document.getElementById('reputationValue').textContent = this.state.reputation;

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–∞—Ö –¥–Ω—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        const calendar = document.getElementById('calendarPanel');
        const dayInfo = this.state.dailyOrders.isRareDay ? " üåü" : "";
        calendar.textContent = 
            `${this.state.currentTime.format('D MMMM YYYY, HH:mm (dddd)')}${dayInfo} | –ó–∞–∫–∞–∑—ã: ${this.state.dailyOrders.generatedCount}/${this.state.dailyOrders.targetCount}`;

        // –ó–∞–∫–∞–∑—ã
        this.updateOrdersDisplay();
        this.updateActiveOrdersDisplay();
        this.updateOrderBadges();

        // –ö–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª–æ–≤
        this.updateDepartmentButtons();
        this.updateEmployeeDisplays();
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    // [–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏:
    // setupEventListeners, updateGameTime, updateDrive, updateDayProgress, 
    // checkDayEnd, isWorkDay, isWorkTime, restoreDrive, removeExpiredOrders,
    // acceptOrder, processDepartment, processEmployeeWork, completeOrder,
    // hireEmployee, assignEmployee, unassignEmployee, updateEmployeeDisplays,
    // updateOrderBadges, showNotification, updateOrdersDisplay, updateActiveOrdersDisplay,
    // updateDepartmentButtons, processEmployees, generateDepartmentsHTML, destroy]

    // –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–Ω–µ–≤–Ω–æ–º –ª–∏–º–∏—Ç–µ
    updateOrdersDisplay() {
        const container = document.getElementById('availableOrders');
        container.innerHTML = '';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω–µ–≤–Ω–æ–º –ª–∏–º–∏—Ç–µ
        const infoElement = document.createElement('div');
        infoElement.style.fontSize = '10px';
        infoElement.style.marginBottom = '8px';
        infoElement.style.padding = '4px';
        infoElement.style.background = this.state.dailyOrders.isRareDay ? '#fff3cd' : '#e9ecef';
        infoElement.style.borderRadius = '3px';
        infoElement.style.textAlign = 'center';
        
        const progress = Math.floor((this.state.dailyOrders.generatedCount / this.state.dailyOrders.targetCount) * 100);
        infoElement.innerHTML = `
            <strong>–ó–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è:</strong> ${this.state.dailyOrders.generatedCount}/${this.state.dailyOrders.targetCount} (${progress}%)${this.state.dailyOrders.isRareDay ? ' üåü –†–ï–î–ö–ò–ô –î–ï–ù–¨' : ''}
        `;
        container.appendChild(infoElement);

        this.state.orders.available.forEach(order => {
            const timeLeft = order.deadline.diff(this.state.currentTime, 'minute');
            const orderElement = document.createElement('div');
            orderElement.className = 'order';
            
            const rarityText = {
                common: '–û–±—ã—á–Ω—ã–π',
                rare: '–†–µ–¥–∫–∏–π', 
                legendary: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'
            };
            
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ createElement –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            const acceptButton = document.createElement('button');
            acceptButton.className = 'accept-btn';
            acceptButton.textContent = '–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑';
            acceptButton.onclick = () => {
                this.acceptOrder(order.id);
            };
            
            orderElement.innerHTML = `
                <div class="order-rarity rarity-${order.rarity}">${rarityText[order.rarity]}</div>
                <strong>${order.name}</strong><br>
                –ù–∞–≥—Ä–∞–¥–∞: ${order.reward}‚ÇΩ<br>
                –°—Ä–æ–∫: ${timeLeft} –º–∏–Ω.<br>
                –†–µ–ø—É—Ç–∞—Ü–∏—è: <span style="color: #27ae60">+${order.reputationReward}</span> / 
                <span style="color: #e74c3c">${order.reputationPenalty}</span><br>
                –û–ø—ã—Ç: +${order.expReward}
            `;
            orderElement.appendChild(acceptButton);
            container.appendChild(orderElement);
        });

        // –ï—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (this.state.orders.available.length === 0) {
            const emptyElement = document.createElement('div');
            emptyElement.style.textAlign = 'center';
            emptyElement.style.padding = '10px';
            emptyElement.style.color = '#6c757d';
            emptyElement.innerHTML = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤<br><small>–ù–æ–≤—ã–µ –ø–æ—è–≤—è—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è</small>';
            container.appendChild(emptyElement);
        }
    }

    // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
let game;
document.addEventListener('DOMContentLoaded', function() {
    game = new TypographyGame();
});
